name: React Native Build Pipeline
'on':
  pull_request:
    branches:
      - develop
  workflow_dispatch: {}

# Add explicit permissions
permissions:
  contents: read
  pull-requests: write
  issues: write

env: {}
jobs:
  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: SampleRNApp
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: yarn
      - name: Install
        run: yarn install --immutable
      - name: Verify Android Environment
        id: android-env-check
        run: |

          # Check for required directories and files
          echo "🔍 Verifying Android project setup..."

          if [ ! -d "android" ]; then
            echo "❌ Error: Android directory not found"
            echo "Make sure you're running this workflow from the root"
            echo "of a React Native project"
            exit 1
          fi

          if [ ! -f "android/gradlew" ]; then
            echo "⚠️ Warning: Gradle wrapper not found at android/gradlew"
            echo "Build may fail if Gradle wrapper is not properly set up"
          fi

          echo "✅ Android environment looks good"
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle
      - name: Make Gradlew Executable
        run: chmod +x android/gradlew
      - name: Run Android Build
        id: android-build
        run: |

          echo "🚀 Starting Android build for release..."

          # Check for .env file and use it if exists
          if [ -f ".env" ]; then
            echo "✅ Found .env file, will be used for the build"
          else
            echo "⚠️ No .env file found in project root"
          fi

          # Run the build with error capture
          echo "Building Android app using official React Native CLI..."

          # Using direct Gradle commands for more reliable builds
          echo "Using Gradle task: assembleRelease for release build with apk output format"

          # Using direct Gradle command
          cd android
          ./gradlew assembleRelease || {
            echo "❌ Android build failed"
            echo "::error::Android build failed. Check logs for details."
            exit 1
          }

          cd ..

          echo "✅ Android build completed successfully"

          # Verify the expected outputs based on output type
          if ls android/app/build/outputs/apk/**/*.apk 1> /dev/null 2>&1; then
            echo "✅ APK files generated successfully"
          else
            echo "⚠️ Warning: Expected APK files not found. Storage steps may fail."
          fi
      - name: Upload Android Artifact
        id: artifact-upload-android
        if: success()
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: android-release-apk
          path: SampleRNApp/android/app/build/outputs/apk/**/*.apk
          retention-days: 30
      - name: Determine PR Status
        id: build-source
        run: |

          # Determine if this is a PR or a direct push (simplified for PR comments only)
          EVENT_NAME="${{ github.event_name }}"
          if [[ "$EVENT_NAME" == "pull_request" ]] || [[ "$EVENT_NAME" == "pull_request_target" ]]; then
            # This is a PR - set output flag
            echo "is_pr=true" >> $GITHUB_OUTPUT
            echo "📌 Running on PR #${{ github.event.pull_request.number }} from branch ${{ github.head_ref }}"
          else
            # This is a direct push - set output flag
            echo "is_pr=false" >> $GITHUB_OUTPUT
            echo "📌 Running on branch ${{ github.ref_name }}"
          fi
      - name: Setup GitHub CLI
        run: |-
          # GitHub CLI is pre-installed on GitHub Actions runners
          echo "Using pre-installed GitHub CLI"
          gh --version
          echo "GitHub CLI setup completed successfully"
        if: steps.build-source.outputs.is_pr == 'true'
      - name: Add PR Comment via GitHub CLI
        if: steps.build-source.outputs.is_pr == 'true'
        run: |-
          # Create comment message
          MESSAGE="Android release build completed!

          Download: Available in GitHub Artifacts"

          # Check if comment already exists and update it
          PR_NUM="${{ github.event.number }}"
          SEARCH_TEXT="Android release build"
          JQ_SELECT=".comments[] | select(.body | contains(\"$SEARCH_TEXT\"))"
          JQ_FILTER="$JQ_SELECT | .id"
          EXISTING_COMMENT_ID=$(gh pr view $PR_NUM --json comments --jq "$JQ_FILTER" | head -1)

          if [ ! -z "$EXISTING_COMMENT_ID" ]; then
            echo "Updating existing comment..."
            REPO="${{ github.repository }}"
            API_URL="/repos/$REPO/issues/comments/$EXISTING_COMMENT_ID"
            gh api -X PATCH "$API_URL" -f body="$MESSAGE"
          else
            echo "Creating new comment..."
            gh pr comment $PR_NUM --body "$MESSAGE"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
