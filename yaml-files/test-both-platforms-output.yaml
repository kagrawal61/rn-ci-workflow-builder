name: Test Both Platforms Build
'on':
  push:
    branches:
      - main
      - develop
      - release/**
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch: {}
env:
  BUILD_ENV: test
jobs:
  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node || 20 }}
          cache: yarn
      - name: Get yarn cache dir
        id: yarn-cache
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
      - name: Setup cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-
      - name: Install
        run: yarn install --immutable
      - name: Determine Build Source
        id: build-source
        run: >

          # Determine if this is a PR or a direct push

          if [[ "${{ github.event_name }}" == "pull_request" || "${{ github.event_name }}" == "pull_request_target" ]];
          then
            # This is a PR - use PR-specific variables
            echo "is_pr=true" >> $GITHUB_OUTPUT
            echo "source_branch=${{ github.head_ref }}" >> $GITHUB_OUTPUT
            echo "source_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "üìå Running on PR #${{ github.event.pull_request.number }} from branch ${{ github.head_ref }}"
          else
            # This is a direct push - use branch ref
            echo "is_pr=false" >> $GITHUB_OUTPUT
            echo "source_branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "source_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "üìå Running on branch ${{ github.ref_name }}"
          fi
      - name: Verify Android Environment
        id: android-env-check
        run: |

          # Check for required directories and files
          echo "üîç Verifying Android project setup..."

          if [ ! -d "android" ]; then
            echo "‚ùå Error: Android directory not found"
            echo "Make sure you're running this workflow from the root of a React Native project"
            exit 1
          fi

          if [ ! -f "android/gradlew" ]; then
            echo "‚ö†Ô∏è Warning: Gradle wrapper not found at android/gradlew"
            echo "Build may fail if Gradle wrapper is not properly set up"
          fi

          echo "‚úÖ Android environment looks good"
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle
      - name: Make Gradlew Executable
        run: chmod +x android/gradlew
      - name: Run Android Build
        id: android-build
        run: |

          echo "üöÄ Starting Android build for develop debug..."

          # Run the build with error capture
          echo "Building Android app using official React Native CLI..."

          # Convert variant to lowercase for mode parameter
          MODE=$(echo "debug" | tr '[:upper:]' '[:lower:]')
          # This is a workaround - we need to use string value directly in MODE

          # Using official React Native CLI for building Android app
          npx react-native build-android --mode=$MODE || {
            echo "‚ùå Android build failed"
            echo "::error::Android build failed. Check logs for details."
            exit 1
          }

          echo "‚úÖ Android build completed successfully"

          # Verify the expected outputs exist
          if ls android/app/build/outputs/apk/**/*.apk 1> /dev/null 2>&1; then
            echo "‚úÖ APK files generated successfully"
          else
            echo "‚ö†Ô∏è Warning: Expected APK files not found. Storage steps may fail."
          fi
      - name: Store Android Build Artifacts
        id: store-artifacts
        if: always() && steps.android-build.outcome != 'skipped'
        continue-on-error: true
        uses: actions/upload-artifact@v3
        with:
          name: android-develop-debug-${{ github.head_ref || github.ref_name }}
          path: android/app/build/outputs/apk/**/*.apk
          retention-days: '14'
      - name: Upload Android Artifact
        id: artifact-upload-android
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: android-develop-debug-${{ github.head_ref || github.ref_name }}
          path: android/app/build/outputs/apk/**/*.apk
          retention-days: 30
      - name: Add PR Comment
        if: steps.build-source.outputs.is_pr == 'true'
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |-
            Android develop debug build completed!

            Download: Available in GitHub Artifacts
          comment_includes: Android develop debug build
          mode: replace
    needs:
      - quality-check
  build-ios:
    name: Build iOS
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node || 20 }}
          cache: yarn
      - name: Get yarn cache dir
        id: yarn-cache
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
      - name: Setup cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-
      - name: Install
        run: yarn install --immutable
      - name: Determine Build Source
        id: build-source
        run: >

          # Determine if this is a PR or a direct push

          if [[ "${{ github.event_name }}" == "pull_request" || "${{ github.event_name }}" == "pull_request_target" ]];
          then
            # This is a PR - use PR-specific variables
            echo "is_pr=true" >> $GITHUB_OUTPUT
            echo "source_branch=${{ github.head_ref }}" >> $GITHUB_OUTPUT
            echo "source_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "üìå Running on PR #${{ github.event.pull_request.number }} from branch ${{ github.head_ref }}"
          else
            # This is a direct push - use branch ref
            echo "is_pr=false" >> $GITHUB_OUTPUT
            echo "source_branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "source_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "üìå Running on branch ${{ github.ref_name }}"
          fi
      - name: Verify iOS Environment
        id: ios-env-check
        run: |

          # Check for required directories and files
          echo "üîç Verifying iOS project setup..."

          if [ ! -d "ios" ]; then
            echo "‚ùå Error: iOS directory not found"
            echo "Make sure you're running this workflow from the root of a React Native project"
            exit 1
          fi

          if [ ! -f "ios/Podfile" ]; then
            echo "‚ùå Error: Podfile not found"
            echo "iOS build will likely fail without a valid Podfile"
            exit 1
          fi

          echo "‚úÖ iOS environment looks good"
      - name: Setup Ruby/CocoaPods
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: 'true'
          working-directory: ios
      - name: Install CocoaPods
        id: pod-install
        run: |

          echo "üì¶ Installing CocoaPods dependencies..."
          cd ios
          pod install || {
            echo "‚ùå CocoaPods installation failed"
            echo "::error::CocoaPods installation failed. Check for valid Podfile and Pod specs."
            exit 1
          }
          echo "‚úÖ CocoaPods installation successful"
      - name: Run iOS Build
        id: ios-build
        run: |

          echo "üöÄ Starting iOS build..."

          # Run the build with error capture
          echo "Building iOS app using official React Native CLI..."

          # Convert variant to lowercase for configuration parameter
          MODE=$(echo "debug" | tr '[:upper:]' '[:lower:]')
          # This is a workaround - we need to use string value directly in MODE

          # Using official React Native CLI for building iOS app
          npx react-native build-ios --mode=$MODE || {
            echo "‚ùå iOS build failed"
            echo "::error::iOS build failed. Check logs for details."
            exit 1
          }

          echo "‚úÖ iOS build completed successfully"

          # Verify the expected outputs exist
          if ls ios/build/Build/Products/**/*.ipa 1> /dev/null 2>&1; then
            echo "‚úÖ IPA files generated successfully"
          else
            echo "‚ö†Ô∏è Warning: Expected IPA files not found. Storage steps may fail."
          fi
      - name: Store iOS Build Artifacts
        id: store-artifacts
        if: always() && steps.ios-build.outcome != 'skipped'
        continue-on-error: true
        uses: actions/upload-artifact@v3
        with:
          name: ios-app-${{ github.head_ref || github.ref_name }}
          path: ios/build/Build/Products/**/*.ipa
          retention-days: '14'
      - name: Upload iOS Artifact
        id: artifact-upload-ios
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: ios-develop-debug-${{ github.head_ref || github.ref_name }}
          path: ios/build/Build/Products/**/*.ipa
          retention-days: 30
      - name: Add PR Comment
        if: steps.build-source.outputs.is_pr == 'true'
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |-
            iOS develop debug build completed!

            Download: Available in GitHub Artifacts
          comment_includes: iOS develop debug build
          mode: replace
    needs:
      - quality-check
  quality-check:
    name: Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node || 20 }}
          cache: yarn
      - name: Install
        run: yarn install --immutable
      - name: TypeScript
        run: yarn tsc --noEmit
      - name: ESLint
        run: yarn lint
      - name: Prettier
        run: yarn format:check
      - name: Unit tests
        run: yarn test --ci
    needs:
      - check-skip
    if: ${{ needs.check-skip.outputs.should-run == 'true' }}
  check-skip:
    name: Check Skip Conditions
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.skip-check.outputs.should-run }}
    steps:
      - name: Skip CI check
        id: skip-check
        run: |-
          # Check for skip markers in commit messages
          SHOULD_RUN="true"
          SKIP_REASON=""
          SKIP_MARKER="[skip ci]"

          # Check commit message when available (push events)
          if [[ "${{ github.event.head_commit.message || '' }}" == *"$SKIP_MARKER"* ]]; then
            SHOULD_RUN="false"
            SKIP_REASON="Skipping due to '$SKIP_MARKER' in commit message"
          fi

          # Check PR title when available (PR events)
          if [[ "${{ github.event_name }}" == "pull_request" && "$SHOULD_RUN" == "true" ]]; then
            if [[ "${{ github.event.pull_request.title || '' }}" == *""* ]]; then
              SHOULD_RUN="false"
              SKIP_REASON="Skipping due to PR title containing skip marker"
            fi
          fi

          # Output the result
          echo "should-run=$SHOULD_RUN" >> $GITHUB_OUTPUT
          echo "$SKIP_REASON"

          if [ "$SHOULD_RUN" == "true" ]; then
            echo "‚è© Workflow will proceed normally"
          else
            echo "‚è≠Ô∏è Workflow will be skipped: $SKIP_REASON"
          fi
